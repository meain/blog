<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ renderData.title or title or metadata.title }}</title>
    <link href="{{ '/img/favicon.png' | url }}" rel='icon' type='image/x-icon'/>
    <meta name="Description" content="{{ renderData.description or description or metadata.description }}">
    <style>html{@media (prefers-color-scheme: dark) {background-color: black;}}</style>
    <link rel="stylesheet" href="{{ '/css/index.css' | url }}" />
    <link rel="stylesheet" href="{{ '/css/prism-base16-monokai.dark.css' | url }}" />
    <link rel="alternate" href="{{ metadata.feed.path | url }}" type="application/atom+xml" title="{{ metadata.title }}" />
    <link href="https://fonts.googleapis.com/css2?family=Inconsolata:wght@400;500&display=swap" rel="stylesheet"> 
    <script src="https://cdnjs.cloudflare.com/ajax/libs/turbolinks/5.2.0/turbolinks.js"></script>
  </head>
  <body>
    <header>
      <h1 class="home"><a href="{{ '/' | url }}">{{ metadata.title }}</a></h1>

      {#- Read more about `eleventy-navigation` at https://www.11ty.dev/docs/plugins/navigation/ #}
      <ul class="nav">
      {%- for entry in collections.all | eleventyNavigation %}
        {% if entry.url != '/' %}
        <li class="nav-item{% if entry.url == page.url %} nav-item-active{% endif %}"><a href="{{ entry.url | url }}">{{ entry.title }}</a></li>
        {% endif %}
      {%- endfor %}
      <li class="nav-item">
        <a rel="alternate" type="application/rss+xml" href="{{ basepath }}/feed.xml">RSS</a>
      </li>
      </ul>
    </header>

    <main{% if templateClass %} class="{{ templateClass }}"{% endif %}>
      {{ content | safe }}
    </main>

    <footer>
      <small> I know you need more sleep! ðŸ˜´ ðŸ™Œ |  <a href="https://meain.io" title="">meain</a> </small>
    </footer>

    <!-- Current page: {{ page.url | url }} -->

    <script data-goatcounter="https://meain.goatcounter.com/count" async src="//gc.zgo.at/count.js"></script>
    <script>
    function addCopyButtons(clipboard) {
      document.querySelectorAll('pre > code').forEach(function (codeBlock) {
        let codeDiv = document.createElement('div');
        codeDiv.setAttribute("class", "code-wrapper");

        let button = document.createElement('button');
        button.className = 'copy-code-button';
        button.type = 'button';
        button.innerText = 'Copy';

        button.addEventListener('click', function () {
            clipboard.writeText(codeBlock.innerText).then(function () {
                button.blur();
                button.innerText = 'Copied!';
                setTimeout(function () {button.innerText = 'Copy';}, 2000);
            }, function (error) {button.innerText = 'Error';});
        });
        codeDiv.appendChild(button);
        codeBlock.parentNode.parentNode.insertBefore(codeDiv, codeBlock.parentNode);
        codeDiv.appendChild(codeBlock.parentNode);
      });
    }
    if (navigator && navigator.clipboard) {
      addCopyButtons(navigator.clipboard);
    } else {
      var script = document.createElement('script');
      script.src = 'https://cdnjs.cloudflare.com/ajax/libs/clipboard-polyfill/2.7.0/clipboard-polyfill.promise.js';
      script.integrity = 'sha256-waClS2re9NUbXRsryKoof+F9qc1gjjIhc2eT7ZbIv94=';
      script.crossOrigin = 'anonymous';
      script.onload = function() {
          addCopyButtons(clipboard);
      };
      document.body.appendChild(script);
    }
    </script>
    <script>
      window.onload = () => {
        const hoverTime = 400
        const fetchers = {}
        const doc = document.implementation.createHTMLDocument('prefetch')
        function fetchPage (url, success) {
          const xhr = new XMLHttpRequest()
          xhr.open('GET', url)
          xhr.setRequestHeader('VND.PREFETCH', 'true')
          xhr.setRequestHeader('Accept', 'text/html')
          xhr.onreadystatechange = () => {
            if (xhr.readyState !== XMLHttpRequest.DONE) return
            if (xhr.status !== 200) return
            success(xhr.responseText)
          }
          xhr.send()
        }
        function prefetchTurbolink (url) {
          fetchPage(url, responseText => {
            doc.open()
            doc.write(responseText)
            doc.close()
            const snapshot = Turbolinks.Snapshot.fromHTMLElement(doc.documentElement)
            Turbolinks.controller.cache.put(url, snapshot)
          })
        }
        function prefetch (url) {
          if (prefetched(url)) return
          prefetchTurbolink(url)
        }
        function prefetched (url) {
          return location.href === url || Turbolinks.controller.cache.has(url)
        }
        function prefetching (url) {
          return !!fetchers[url]
        }
        function cleanup (event) {
          const element = event.target
          clearTimeout(fetchers[element.href])
          element.removeEventListener('mouseleave', cleanup)
        }
        document.addEventListener('mouseover', event => {
          const url = event.target.href
          if (!url) return
          if (prefetched(url)) return
          if (prefetching(url)) return
          cleanup(event)
          event.target.addEventListener('mouseleave', cleanup)
          fetchers[url] = setTimeout(() => prefetch(url), hoverTime)
        })
      }
    </script>
  </body>
</html>
